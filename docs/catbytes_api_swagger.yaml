openapi: 3.0.3
info:
  title: CatBytes Web Platform
  description: |-
    This is CatBytes Web Platform API specification.
    Some useful links:
    - [CatBytes backend repository](https://github.com/catbytes-community/webplatform-backend)

  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
  
servers:
  - url: https://somepath.catbytes.io/api/v1
tags:
  - name: application
    description: New users applications
  - name: user
    description: User related operations

paths:
  /application:
    post:
      tags:
        - application
      summary: Create new user application
      description: Send new user application's data for review. 
      operationId: createApplication
      requestBody:
        description: Data user inserted on application
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: Jane
                lastName:
                  type: string
                  example: Doe
                about:
                  type: string
                  example: I'm passionate about C++ programming
      responses:
        default:
          description: successful operation
    get:
      tags:
        - application
      summary: Get all (active?) applications
      description: ''
      operationId: getApplications
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  applications:
                    type: array
                    items:
                      type: object
                    example: [{"application_id": 1, "name": "Jane Doe", "description": "I'm passionate about C++ programming"}, {"application_id": 2, "name": "Mary Roe", "description": "I love frontend"}]
        '403':
          description: User is not allowed to view applications list

  /application/{application_id}:
    get:
      tags:
        - application
      summary: Get application by id
      description: ''
      operationId: getApplicationById
      parameters:
        - name: application_id
          in: path
          description: ''
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 2
                  name:
                    type: string
                    example: Mary Roe
                  description:
                    type: string
                    example: I love frontend  
        '400':
          description: Invalid application id supplied
        '403':
          description: User is not allowed to view applications
        '404':
          description: Application not found
    post:
      tags:
        - application
      summary: Perform action on application
      description: This endpoint is used to either approve or deny an application. 
      operationId: editApplication
      parameters:
        - name: application_id
          in: path
          description: ''
          required: true
          schema:
            type: integer
      requestBody:
        description: Action with comment (the comment is stored in database along with closed application, no matter what the action was)
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  example: deny
                comment:
                  type: string
                  example: seems to be phishing
      responses:
        '200':
          description: Successful operation
        '400':
          description: Unknown action
        '403':
          description: User is not allowed to edit applications
        '404':
          description: Application not found

  /user:
    post:
      tags:
        - user
      summary: Create user
      description: First time authenticated user creation.
      operationId: createUser
      requestBody:
        description: Data user inserted on registration
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: theUser
                firstName:
                  type: string
                  example: Jane
                lastName:
                  type: string
                  example: Doe
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 42
  /user/{user_id}:
    get:
      tags:
        - user
      summary: Get user by user id
      description: ''
      operationId: getUserById
      parameters:
        - name: user_id
          in: path
          description: 'The id of user that needs to be fetched. Use 42 for testing. '
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 42
                  username:
                    type: string
                    example: theUser
                  firstName:
                    type: string
                    example: Jane
                  lastName:
                    type: string
                    example: Doe 
                  roles:
                    type: array
                    items:
                      type: string
                    example: ["mentee"]
        '400':
          description: Invalid user id supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user. Any changes that are performed in user profile come here.
      operationId: updateUser
      parameters:
        - name: user_id
          in: path
          description: id of user that need to be updated
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
                type: object
                properties:
                  username:
                    type: string
                    example: theUser
                  firstName:
                    type: string
                    example: Jane
                  lastName:
                    type: string
                    example: NewLastName    
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: user_id
          in: path
          description: The id of user that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Invalid user_id supplied
        '404':
          description: User not found


components:
  schemas:
    User:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 10
          username:
            type: string
            example: theUser
          firstName:
            type: string
            example: John
          lastName:
            type: string
            example: James
          email:
            type: string
            example: john@email.com
          password:
            type: string
            example: '12345'
          phone:
            type: string
            example: '12345'
          userStatus:
            type: integer
            description: User Status
            format: int32
            example: 1
        xml:
          name: user
   
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header